{"version":3,"sources":["firebase.js","components/BurgerApp.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","BurgerApp","useState","task","setTask","tasklist","setTaskList","idOfUpdate","setIdOfUpdate","truth","setTruth","useEffect","populate","markCompleteGlobal","data","firestore","collection","get","then","querySnapshot","forEach","doc","newData","indexOf","id","arr","update","completed","className","type","name","onChange","e","target","value","handleChange","onClick","datas","set","map","preventDefault","setTimeout","taskCompleted","delete","console","log","catch","error","res","filter","deletetask","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.33d3e2b5.chunk.js","sourcesContent":["\r\nimport firebase from \"firebase\";\r\nimport \"@firebase/firestore\";\r\n\r\nvar firebaseConfig = {\r\n  apiKey: \"AIzaSyCgLd1bm7GEQgpF4hru_CzlX8-26W2fwoc\",\r\n  authDomain: \"kaoutar-burger.firebaseapp.com\",\r\n  projectId: \"kaoutar-burger\",\r\n  storageBucket: \"kaoutar-burger.appspot.com\",\r\n  messagingSenderId: \"134049853103\",\r\n  appId: \"1:134049853103:web:6b3d352ebf907304112e5a\",\r\n  measurementId: \"G-5GNRW7G3B0\"\r\n};\r\n  // Initialize Firebase\r\n  firebase.initializeApp(firebaseConfig);\r\n  //firebase.analytics();\r\n\r\n  export default firebase ;\r\n","\r\nimport React, { useState, useEffect } from \"react\";\r\nimport \"./burgerapp.css\";\r\nimport firebase from \"../firebase\";\r\n\r\nfunction BurgerApp() {\r\n  const [task, setTask] = useState(\"\");\r\n  const [tasklist, setTaskList] = useState([]);\r\n  const [idOfUpdate, setIdOfUpdate] = useState(null);\r\n  const [truth, setTruth] = useState();\r\n\r\n  const handleChange = (e) => {\r\n    setTask(e.target.value);\r\n  };\r\n\r\n useEffect(() => {\r\n  populate();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    let id = idOfUpdate;\r\n    if (id !== null) {\r\n      markCompleteGlobal();\r\n    }\r\n  }, [truth]);\r\n\r\n ///////////////////////////////////////\r\n\r\n  const AddTask = () => {\r\n    const datas = {\r\n      id: firebase\r\n        .firestore()\r\n        .collection(\"burgers\")\r\n        .doc().id,\r\n    };\r\n\r\n\r\n    const db = firebase.firestore();\r\n    db.collection(\"burgers\")\r\n      .doc(datas.id)\r\n      .set({ task: task, completed: false, id: datas.id,value: task })\r\n      .then(() => {\r\n        populate();\r\n      })\r\n  };\r\n\r\n  const populate = (data) => {\r\n    setTaskList([]);\r\n    return firebase\r\n      .firestore()\r\n      .collection(\"burgers\")\r\n      .get()\r\n      .then(function(querySnapshot) {\r\n        querySnapshot.forEach(function(doc) {\r\n          let newData = doc.data();\r\n\r\n          if (tasklist.indexOf(newData.id) === -1) {\r\n            setTaskList((arr) => {\r\n              return [...arr, newData];\r\n            });\r\n          } \r\n        });\r\n      })\r\n  };\r\n\r\n///////////////////////////////////////////////////////////\r\nconst taskCompleted = (e,id) => {\r\n  e.preventDefault();\r\n\r\n  debugger\r\nsetIdOfUpdate(id);\r\n  setTaskList(\r\n    tasklist.map((task) => {\r\n      if (task.id === id) {\r\n        task.completed = !task.completed;\r\n\r\n        setTimeout(function() {\r\n          setTruth(task.completed);\r\n        }, 1000);\r\n      }\r\n      return task;\r\n    }))\r\n  \r\n};\r\n\r\n\r\n\r\n \r\n\r\n  const markCompleteGlobal = () => {\r\n  let id = idOfUpdate;\r\n  const itemtoupdate = firebase\r\n    .firestore()\r\n    .collection(\"burgers\")\r\n    .doc(id)\r\n\r\n  itemtoupdate.update({\r\n  completed: truth,\r\n  })\r\n\r\n  setIdOfUpdate(null);\r\n  setTruth(null);\r\n};\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\nconst deletetask = (e,id) => {\r\n  e.preventDefault();\r\n  const db = firebase.firestore();\r\n  db.collection(\"burgers\")\r\n    .doc(id)\r\n    .delete()\r\n    .then(() => {\r\n      console.log(\"Document successfully deleted!\", id);\r\n    })\r\n    .catch((error) => {\r\n      console.error(id, \"Error removing document: \", error);\r\n    })\r\n    .then((res) => setTaskList([...tasklist.filter((task) => task.id !== id)]));\r\n  console.log(id, \"here is an id\", id);\r\n};\r\n\r\n///////////////////////////////////////////////////////////\r\n\r\n \r\nreturn (\r\n  <div className=\"todo\">\r\n    <h1>Burgers Made</h1>\r\n    New Burger  :\r\n    <input type=\"text\" name=\"text\" id=\"text\" onChange={(e) => handleChange(e)}/>\r\n    <button className=\"add-btn\" onClick={AddTask}>Make it</button>\r\n    \r\n    <br />\r\n    <div>{task.value}</div>\r\n    <br />\r\n    \r\n    {tasklist !== [] ? (\r\n      <div>\r\n    \r\n        {tasklist.map((task) => (!task.completed ? <div>{task.value} Burger <button className=\"completed\" onClick={(e) => taskCompleted(e, task.id)}>\r\n\r\nEat it!! </button></div> : null\r\n     \r\n           \r\n     ))}        \r\n\r\n     </div>\r\n\r\n  \r\n    ) : null}\r\n\r\n<h1>Burgers Made</h1>\r\n\r\n\r\n\r\n{tasklist !== [] ? (\r\n      <div>\r\n    \r\n        {tasklist.map((task) => (task.completed ? <div><br></br>{task.value} Burger<button className=\"delete\" onClick={(e) => deletetask(e, task.id)}> Delete it!</button></div> \r\n        : null\r\n     \r\n           \r\n     ))}        \r\n\r\n     </div>\r\n\r\n  \r\n    ) : null}\r\n    \r\n\r\n    \r\n\r\n  </div>\r\n);\r\n}\r\n\r\n\r\n//\r\nexport default BurgerApp;\r\n","import React from \"react\";\r\nimport \"./App.css\";\r\nimport BurgerApp from \"./components/BurgerApp\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <span className=\"title\">Eat the Burger <br />\r\n      <span className=\"title2\">Made Burgers,Eat Burgers.</span> </span><br />\r\n      <BurgerApp />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}